/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_workers_logParser_js",{

/***/ "(app-pages-browser)/./workers/logParser.js":
/*!******************************!*\
  !*** ./workers/logParser.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("self.onmessage = (e)=>{\n    const logContent = e.data;\n    const lines = logContent.split(\"\\n\");\n    const totalLines = lines.length;\n    const requestStats = {\n        totalRequests: 0,\n        uniqueIPs: new Set(),\n        totalAttackAttempts: 0\n    };\n    const httpMethods = {};\n    const statusCodes = {\n        \"2xx\": 0,\n        \"3xx\": 0,\n        \"4xx\": 0,\n        \"5xx\": 0\n    };\n    const attackDistribution = {\n        \"SQL Injection\": 0,\n        XSS: 0,\n        \"Command Injection\": 0,\n        \"Directory Traversal\": 0,\n        \"Brute Force\": 0\n    };\n    const trafficOverTime = Array(24).fill(0).map((_, i)=>({\n            hour: i,\n            count: 0\n        }));\n    let recentAttacks = [];\n    const attackPatterns = {\n        \"SQL Injection\": new RegExp(\"(UNION\\\\s+SELECT|SELECT\\\\s+.*\\\\s+FROM|DROP\\\\s+TABLE|--|%27|%2D%2D|\\\\s*OR\\\\s*'\\\\d|EXEC|CONCAT|\\\\b(SELECT|INSERT|UPDATE|DELETE)\\\\b(\\\\s+|$)|;\\\\s*--)\", \"i\"),\n        XSS: new RegExp(\"<script[^>]*>|javascript:|onerror\\\\s*=|onload\\\\s*=|eval\\\\(|alert\\\\(|document\\\\.cookie|document\\\\.location\", \"i\"),\n        \"Command Injection\": new RegExp(\"\\\\b(cat|ls|id|uname|whoami|pwd|rm|touch|wget|curl|scp|rsync|ftp|nc|nmap|ping|traceroute|telnet|ssh)\\\\b(\\\\s+|$)|\\\\b(sh|bash|zsh)\\\\b(\\\\s+|$)\", \"i\"),\n        \"Directory Traversal\": new RegExp(\"(\\\\.\\\\./){2,}|%2e{2,}\", \"i\"),\n        // Updated Brute Force pattern: Detect login/authenticate related paths\n        \"Brute Force\": /login|signin|authenticate|password|user|checkin|auth/i\n    };\n    const validHttpMethods = [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"PATCH\",\n        \"CONNECT\",\n        \"TRACE\"\n    ];\n    const commonParams = [\n        \"item_category_id\",\n        \"customer_id\",\n        \"product_id\",\n        \"price_list_id\",\n        \"customer_type_id\",\n        \"branch_id\",\n        \"user_id\",\n        \"admin_user_id\"\n    ];\n    const bruteForceExcludePaths = [\n        \"/user_checkin_activity/\",\n        \"/customer/\"\n    ];\n    lines.forEach((line, index)=>{\n        if (index % 1000 === 0) {\n            self.postMessage({\n                progress: Math.round(index / totalLines * 100)\n            });\n        }\n        const match = line.match(/^(\\S+) (\\S+) (\\S+) \\[([^\\]]+)\\] \"(\\S+) ([^\"]*)\" (\\d+) (\\d+) \"([^\"]*)\" \"([^\"]*)\"/);\n        if (match) {\n            const [, ipAddress, , , timestamp, method, path, status, , referer, userAgent] = match;\n            // Skip invalid HTTP methods\n            if (!validHttpMethods.includes(method)) {\n                return;\n            }\n            requestStats.totalRequests++;\n            requestStats.uniqueIPs.add(ipAddress);\n            httpMethods[method] = (httpMethods[method] || 0) + 1;\n            const statusGroup = status[0] + \"xx\";\n            statusCodes[statusGroup]++;\n            const hour = new Date(timestamp.replace(\":\", \" \")).getHours();\n            trafficOverTime[hour].count++;\n            let attackType = null;\n            // Exclude common parameters from being flagged as SQL Injection\n            const isSafe = commonParams.some((param)=>path.includes(param));\n            if (!isSafe) {\n                for (const [type, pattern] of Object.entries(attackPatterns)){\n                    if (pattern.test(path) || pattern.test(referer) || pattern.test(userAgent)) {\n                        attackType = type;\n                        break;\n                    }\n                }\n            }\n            // Brute force detection based on path pattern (exclude certain paths like user check-in activity)\n            const isBruteForcePath = bruteForceExcludePaths.some((excludePath)=>path.includes(excludePath));\n            if (!isBruteForcePath && attackPatterns[\"Brute Force\"].test(path)) {\n                attackType = \"Brute Force\"; // Flag as brute force if the path matches the brute force pattern\n            }\n            if (attackType) {\n                console.log(\"Attack detected: \".concat(attackType, \" from \").concat(ipAddress, \" on \").concat(path));\n                attackDistribution[attackType]++;\n                requestStats.totalAttackAttempts++;\n                recentAttacks.push({\n                    timestamp,\n                    ipAddress,\n                    attackType,\n                    requestPath: path\n                });\n            }\n        } else {\n            // Log non-matching lines for debugging\n            console.log(\"No match for line:\", line);\n        }\n    });\n    // Unique IPs count\n    requestStats.uniqueIPs = requestStats.uniqueIPs.size;\n    // Limit the recent attacks to the last 100\n    recentAttacks = recentAttacks.slice(-100).reverse();\n    self.postMessage({\n        requestStats,\n        httpMethods,\n        statusCodes,\n        attackDistribution,\n        trafficOverTime,\n        recentAttacks\n    });\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./workers/logParser.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "0043db975cae2ca3"; }
/******/ }();
/******/ 
/******/ }
);