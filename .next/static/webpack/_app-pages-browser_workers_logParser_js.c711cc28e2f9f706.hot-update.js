/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_workers_logParser_js",{

/***/ "(app-pages-browser)/./workers/logParser.js":
/*!******************************!*\
  !*** ./workers/logParser.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("self.onmessage = (e)=>{\n    const logContent = e.data;\n    const lines = logContent.split(\"\\n\");\n    const totalLines = lines.length;\n    const requestStats = {\n        totalRequests: 0,\n        uniqueIPs: new Set(),\n        totalAttackAttempts: 0\n    };\n    const httpMethods = {};\n    const statusCodes = {\n        \"2xx\": 0,\n        \"3xx\": 0,\n        \"4xx\": 0,\n        \"5xx\": 0\n    };\n    const attackDistribution = {\n        \"SQL Injection\": 0,\n        XSS: 0,\n        \"Command Injection\": 0,\n        \"Directory Traversal\": 0,\n        \"Brute Force\": 0\n    };\n    const trafficOverTime = Array(24).fill(0).map((_, i)=>({\n            hour: i,\n            count: 0\n        }));\n    let recentAttacks = [];\n    // Define valid parameter patterns\n    const validParameterPatterns = {\n        by: /^[a-zA-Z][a-zA-Z0-9._]*$/,\n        sort: /^(asc|desc)$/i,\n        id: /^\\d+$/,\n        limit: /^\\d+$/,\n        page: /^\\d+$/,\n        admin_user_id: /^\\d+$/,\n        customer_id: /^\\d+$/,\n        year: /^\\d{4}$/,\n        quarter: /^[1-4]$/,\n        semester: /^[1-2]$/\n    };\n    const attackPatterns = {\n        \"SQL Injection\": {\n            pattern: new RegExp([\n                // SQL comments\n                \"(?:--[\\\\s\\\\r\\\\n\\\\v\\\\f]*$)|(?:\\\\/\\\\*.*?\\\\*\\\\/)\",\n                // SQL commands in unexpected contexts\n                \"(?:;\\\\s*(?:select|insert|update|delete|drop|exec|execute|union|alter)\\\\s)\",\n                // Typical SQL injection payloads\n                \"(?:'\\\\s*(?:or|and)\\\\s*'\\\\s*(?:=|<|>)\\\\s*')|(?:'\\\\s*(?:or|and)\\\\s*[0-9])\",\n                // UNION-based injection attempts\n                \"union\\\\s+(?:all\\\\s+)?select\",\n                // Stacked queries\n                \";\\\\s*(?:wait|delay|sleep)\\\\s*\\\\([^)]*\\\\)\",\n                // Time-based injection patterns\n                \"benchmark\\\\s*\\\\([^)]*\\\\)\",\n                // Error-based injection patterns\n                \"extractvalue\\\\s*\\\\([^)]*\\\\)\",\n                // Hex/char injection\n                \"(?:0x[0-9a-f]{2,})|(?:char\\\\s*\\\\([^)]+\\\\)\\\\s*[+])\"\n            ].join(\"|\"), \"i\"),\n            test: function(path, referer, userAgent) {\n                try {\n                    // Parse URL and parameters\n                    const url = new URL(path, \"http://example.com\");\n                    const params = url.searchParams;\n                    // Check path segments\n                    const pathSegments = url.pathname.split(\"/\");\n                    for (const segment of pathSegments){\n                        if (segment && this.pattern.test(decodeURIComponent(segment))) {\n                            return true;\n                        }\n                    }\n                    // Validate parameters\n                    for (const [name, value] of params.entries()){\n                        if (!value) continue;\n                        const decodedValue = decodeURIComponent(value);\n                        // Check against whitelist if parameter is known\n                        if (validParameterPatterns[name]) {\n                            if (!validParameterPatterns[name].test(decodedValue)) {\n                                if (this.pattern.test(decodedValue)) {\n                                    return true;\n                                }\n                            }\n                        } else if (this.pattern.test(decodedValue)) {\n                            return true;\n                        }\n                    }\n                    // Check referrer and user agent\n                    if (referer && this.pattern.test(referer)) return true;\n                    if (userAgent && this.pattern.test(userAgent)) return true;\n                    return false;\n                } catch (e) {\n                    // If URL parsing fails, fall back to simple pattern matching\n                    return this.pattern.test(path) || referer && this.pattern.test(referer) || userAgent && this.pattern.test(userAgent);\n                }\n            }\n        },\n        XSS: new RegExp(\"<script[^>]*>|javascript:|onerror\\\\s*=|onload\\\\s*=|onmouseover\\\\s*=|onclick\\\\s*=|eval\\\\(|alert\\\\(|document\\\\.cookie|document\\\\.location|fromCharCode\\\\s*\\\\(|expression\\\\s*\\\\(|<img[^>]*src\\\\s*=\\\\s*['\\\"]?javascript:|<iframe[^>]*>|<object[^>]*>|<embed[^>]*>|<svg[^>]*on[^>]*=|<math[^>]*on[^>]*=|<[^>]+style\\\\s*=\\\\s*['\\\"]?[^>]*expression\\\\(|data:text/html|vbscript:|innerHTML|parentNode\\\\.insertBefore|setTimeout\\\\s*\\\\(|setInterval\\\\s*\\\\(\", \"i\"),\n        \"Command Injection\": new RegExp(\"\\\\b(cat|ls|id|uname|whoami|pwd|rm|touch|wget|curl|scp|rsync|ftp|nc|nmap|ping|traceroute|telnet|ssh)\\\\b(\\\\s+|$)|\\\\b(sh|bash|zsh|dash|fish|python[23]?|perl|ruby|php|java|node|gcc|g\\\\+\\\\+)\\\\b(\\\\s+|$)|[;&|]{2,}|\\\\$\\\\(.*?\\\\)|\\\\s+[2]?[>|&]|\\\\s+[<>]|\\\\b(exec|system|passthru|shell_exec|popen|eval|assert|proc_open|pcntl_exec|preg_replace\\\\(.*?e\\\\))\\\\b|(?<!by=|sort=|customer_id=|limit=|page=)\\\\b(id|def\\\\.id)\\\\b(\\\\s+|$)\", \"i\"),\n        \"Directory Traversal\": new RegExp(\"(\\\\.\\\\./){2,}|(%2e){2,}|/etc/passwd|wp-config(\\\\.php)?|c:/windows|file:\\\\s*/|(/|%2f)(root|bin|home|usr|opt)/\", \"i\"),\n        \"Brute Force\": /login|signin|authenticate/i\n    };\n    const validHttpMethods = [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"PATCH\",\n        \"CONNECT\",\n        \"TRACE\"\n    ];\n    lines.forEach((line, index)=>{\n        if (index % 1000 === 0) {\n            self.postMessage({\n                progress: Math.round(index / totalLines * 100)\n            });\n        }\n        const match = line.match(/^(\\S+) (\\S+) (\\S+) \\[([^\\]]+)\\] \"(\\S+) ([^\"]*)\" (\\d+) (\\d+) \"([^\"]*)\" \"([^\"]*)\"/);\n        if (match) {\n            const [, ipAddress, , , timestamp, method, path, status, , referer, userAgent] = match;\n            if (!validHttpMethods.includes(method)) {\n                return;\n            }\n            requestStats.totalRequests++;\n            requestStats.uniqueIPs.add(ipAddress);\n            httpMethods[method] = (httpMethods[method] || 0) + 1;\n            const statusGroup = status[0] + \"xx\";\n            statusCodes[statusGroup]++;\n            const hour = new Date(timestamp.replace(\":\", \" \")).getHours();\n            trafficOverTime[hour].count++;\n            let attackType = null;\n            for (const [type, pattern] of Object.entries(attackPatterns)){\n                if (type === \"SQL Injection\") {\n                    if (pattern.test(path, referer, userAgent)) {\n                        attackType = type;\n                        break;\n                    }\n                } else if (pattern.test(path) || pattern.test(referer) || pattern.test(userAgent)) {\n                    attackType = type;\n                    break;\n                }\n            }\n            if (attackType) {\n                attackDistribution[attackType]++;\n                requestStats.totalAttackAttempts++;\n                recentAttacks.push({\n                    timestamp,\n                    ipAddress,\n                    attackType,\n                    requestPath: path\n                });\n            }\n        }\n    });\n    requestStats.uniqueIPs = requestStats.uniqueIPs.size;\n    recentAttacks = recentAttacks.slice(-100).reverse();\n    self.postMessage({\n        requestStats,\n        httpMethods,\n        statusCodes,\n        attackDistribution,\n        trafficOverTime,\n        recentAttacks\n    });\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./workers/logParser.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "530f20fea467dcbf"; }
/******/ }();
/******/ 
/******/ }
);