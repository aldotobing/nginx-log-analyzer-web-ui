/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_workers_logParser_js",{

/***/ "(app-pages-browser)/./workers/logParser.js":
/*!******************************!*\
  !*** ./workers/logParser.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("self.onmessage = (e)=>{\n    const logContent = e.data;\n    const lines = logContent.split(\"\\n\");\n    const totalLines = lines.length;\n    const requestStats = {\n        totalRequests: 0,\n        uniqueIPs: new Set(),\n        totalAttackAttempts: 0\n    };\n    const httpMethods = {};\n    const statusCodes = {\n        \"2xx\": 0,\n        \"3xx\": 0,\n        \"4xx\": 0,\n        \"5xx\": 0\n    };\n    const attackDistribution = {\n        \"SQL Injection\": 0,\n        XSS: 0,\n        \"Command Injection\": 0,\n        \"Directory Traversal\": 0,\n        \"Brute Force\": 0\n    };\n    const trafficOverTime = Array(24).fill(0).map((_, i)=>({\n            hour: i,\n            count: 0\n        }));\n    let recentAttacks = [];\n    // Improved SQL Injection pattern to avoid false positives\n    const attackPatterns = {\n        \"SQL Injection\": new RegExp(\"(UNION\\\\s+SELECT|SELECT\\\\s+.*\\\\s+FROM|DROP\\\\s+TABLE|--|%27|%2D%2D|\\\\s*OR\\\\s*'\\\\d|EXEC|CONCAT|\\\\b(SELECT|INSERT|UPDATE|DELETE)\\\\b(\\\\s+|$)|;\\\\s*--)\", \"i\"),\n        XSS: new RegExp(\"<script[^>]*>|javascript:|onerror\\\\s*=|onload\\\\s*=|eval\\\\(|alert\\\\(|document\\\\.cookie|document\\\\.location\", \"i\"),\n        \"Command Injection\": new RegExp(\"\\\\b(cat|ls|id|uname|whoami|pwd|rm|touch|wget|curl|scp|rsync|ftp|nc|nmap|ping|traceroute|telnet|ssh)\\\\b(\\\\s+|$)|\\\\b(sh|bash|zsh)\\\\b(\\\\s+|$)\", \"i\"),\n        \"Directory Traversal\": new RegExp(\"(\\\\.\\\\./){2,}|%2e{2,}\", \"i\"),\n        \"Brute Force\": /login|signin|authenticate|password|admin|user/i\n    };\n    const validHttpMethods = [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"PATCH\",\n        \"CONNECT\",\n        \"TRACE\"\n    ];\n    const commonParams = [\n        \"item_category_id\",\n        \"customer_id\",\n        \"product_id\",\n        \"price_list_id\",\n        \"customer_type_id\",\n        \"branch_id\"\n    ];\n    lines.forEach((line, index)=>{\n        if (index % 1000 === 0) {\n            self.postMessage({\n                progress: Math.round(index / totalLines * 100)\n            });\n        }\n        const match = line.match(/^(\\S+) (\\S+) (\\S+) \\[([^\\]]+)\\] \"(\\S+) ([^\"]*)\" (\\d+) (\\d+) \"([^\"]*)\" \"([^\"]*)\"/);\n        if (match) {\n            const [, ipAddress, , , timestamp, method, path, status, , referer, userAgent] = match;\n            // Skip invalid HTTP methods\n            if (!validHttpMethods.includes(method)) {\n                return;\n            }\n            requestStats.totalRequests++;\n            requestStats.uniqueIPs.add(ipAddress);\n            httpMethods[method] = (httpMethods[method] || 0) + 1;\n            const statusGroup = status[0] + \"xx\";\n            statusCodes[statusGroup]++;\n            const hour = new Date(timestamp.replace(\":\", \" \")).getHours();\n            trafficOverTime[hour].count++;\n            let attackType = null;\n            // Exclude common parameters from being flagged as SQL Injection\n            const isSafe = commonParams.some((param)=>path.includes(param));\n            if (!isSafe) {\n                for (const [type, pattern] of Object.entries(attackPatterns)){\n                    if (pattern.test(path) || pattern.test(referer) || pattern.test(userAgent)) {\n                        attackType = type;\n                        break;\n                    }\n                }\n            }\n            // Log and count detected attacks\n            if (attackType) {\n                console.log(\"Attack detected: \".concat(attackType, \" from \").concat(ipAddress, \" on \").concat(path));\n                attackDistribution[attackType]++;\n                requestStats.totalAttackAttempts++;\n                recentAttacks.push({\n                    timestamp,\n                    ipAddress,\n                    attackType,\n                    requestPath: path\n                });\n            }\n        } else {\n            // Log non-matching lines for debugging\n            console.log(\"No match for line:\", line);\n        }\n    });\n    // Unique IPs count\n    requestStats.uniqueIPs = requestStats.uniqueIPs.size;\n    // Limit the recent attacks to the last 100\n    recentAttacks = recentAttacks.slice(-100).reverse();\n    self.postMessage({\n        requestStats,\n        httpMethods,\n        statusCodes,\n        attackDistribution,\n        trafficOverTime,\n        recentAttacks\n    });\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3dvcmtlcnMvbG9nUGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBQSxLQUFLQyxTQUFTLEdBQUcsQ0FBQ0M7SUFDaEIsTUFBTUMsYUFBYUQsRUFBRUUsSUFBSTtJQUN6QixNQUFNQyxRQUFRRixXQUFXRyxLQUFLLENBQUM7SUFDL0IsTUFBTUMsYUFBYUYsTUFBTUcsTUFBTTtJQUUvQixNQUFNQyxlQUFlO1FBQ25CQyxlQUFlO1FBQ2ZDLFdBQVcsSUFBSUM7UUFDZkMscUJBQXFCO0lBQ3ZCO0lBQ0EsTUFBTUMsY0FBYyxDQUFDO0lBQ3JCLE1BQU1DLGNBQWM7UUFBRSxPQUFPO1FBQUcsT0FBTztRQUFHLE9BQU87UUFBRyxPQUFPO0lBQUU7SUFDN0QsTUFBTUMscUJBQXFCO1FBQ3pCLGlCQUFpQjtRQUNqQkMsS0FBSztRQUNMLHFCQUFxQjtRQUNyQix1QkFBdUI7UUFDdkIsZUFBZTtJQUNqQjtJQUNBLE1BQU1DLGtCQUFrQkMsTUFBTSxJQUMzQkMsSUFBSSxDQUFDLEdBQ0xDLEdBQUcsQ0FBQyxDQUFDQyxHQUFHQyxJQUFPO1lBQUVDLE1BQU1EO1lBQUdFLE9BQU87UUFBRTtJQUN0QyxJQUFJQyxnQkFBZ0IsRUFBRTtJQUV0QiwwREFBMEQ7SUFDMUQsTUFBTUMsaUJBQWlCO1FBQ3JCLGlCQUFpQixJQUFJQyxPQUNuQixxSkFDQTtRQUVGWCxLQUFLLElBQUlXLE9BQ1AsNkdBQ0E7UUFFRixxQkFBcUIsSUFBSUEsT0FDdkIsOElBQ0E7UUFFRix1QkFBdUIsSUFBSUEsT0FBTyx5QkFBeUI7UUFDM0QsZUFBZTtJQUNqQjtJQUVBLE1BQU1DLG1CQUFtQjtRQUN2QjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUVELE1BQU1DLGVBQWU7UUFDbkI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFFRHpCLE1BQU0wQixPQUFPLENBQUMsQ0FBQ0MsTUFBTUM7UUFDbkIsSUFBSUEsUUFBUSxTQUFTLEdBQUc7WUFDdEJqQyxLQUFLa0MsV0FBVyxDQUFDO2dCQUFFQyxVQUFVQyxLQUFLQyxLQUFLLENBQUMsUUFBUzlCLGFBQWM7WUFBSztRQUN0RTtRQUVBLE1BQU0rQixRQUFRTixLQUFLTSxLQUFLLENBQ3RCO1FBRUYsSUFBSUEsT0FBTztZQUNULE1BQU0sR0FFSkMsZUFHQUMsV0FDQUMsUUFDQUMsTUFDQUMsVUFFQUMsU0FDQUMsVUFDRCxHQUFHUDtZQUVKLDRCQUE0QjtZQUM1QixJQUFJLENBQUNULGlCQUFpQmlCLFFBQVEsQ0FBQ0wsU0FBUztnQkFDdEM7WUFDRjtZQUVBaEMsYUFBYUMsYUFBYTtZQUMxQkQsYUFBYUUsU0FBUyxDQUFDb0MsR0FBRyxDQUFDUjtZQUUzQnpCLFdBQVcsQ0FBQzJCLE9BQU8sR0FBRyxDQUFDM0IsV0FBVyxDQUFDMkIsT0FBTyxJQUFJLEtBQUs7WUFFbkQsTUFBTU8sY0FBY0wsTUFBTSxDQUFDLEVBQUUsR0FBRztZQUNoQzVCLFdBQVcsQ0FBQ2lDLFlBQVk7WUFFeEIsTUFBTXhCLE9BQU8sSUFBSXlCLEtBQUtULFVBQVVVLE9BQU8sQ0FBQyxLQUFLLE1BQU1DLFFBQVE7WUFDM0RqQyxlQUFlLENBQUNNLEtBQUssQ0FBQ0MsS0FBSztZQUUzQixJQUFJMkIsYUFBYTtZQUVqQixnRUFBZ0U7WUFDaEUsTUFBTUMsU0FBU3ZCLGFBQWF3QixJQUFJLENBQUMsQ0FBQ0MsUUFBVWIsS0FBS0ksUUFBUSxDQUFDUztZQUMxRCxJQUFJLENBQUNGLFFBQVE7Z0JBQ1gsS0FBSyxNQUFNLENBQUNHLE1BQU1DLFFBQVEsSUFBSUMsT0FBT0MsT0FBTyxDQUFDaEMsZ0JBQWlCO29CQUM1RCxJQUNFOEIsUUFBUUcsSUFBSSxDQUFDbEIsU0FDYmUsUUFBUUcsSUFBSSxDQUFDaEIsWUFDYmEsUUFBUUcsSUFBSSxDQUFDZixZQUNiO3dCQUNBTyxhQUFhSTt3QkFDYjtvQkFDRjtnQkFDRjtZQUNGO1lBRUEsaUNBQWlDO1lBQ2pDLElBQUlKLFlBQVk7Z0JBQ2RTLFFBQVFDLEdBQUcsQ0FDVCxvQkFBdUN2QixPQUFuQmEsWUFBVyxVQUF3QlYsT0FBaEJILFdBQVUsUUFBVyxPQUFMRztnQkFFekQxQixrQkFBa0IsQ0FBQ29DLFdBQVc7Z0JBQzlCM0MsYUFBYUksbUJBQW1CO2dCQUNoQ2EsY0FBY3FDLElBQUksQ0FBQztvQkFDakJ2QjtvQkFDQUQ7b0JBQ0FhO29CQUNBWSxhQUFhdEI7Z0JBQ2Y7WUFDRjtRQUNGLE9BQU87WUFDTCx1Q0FBdUM7WUFDdkNtQixRQUFRQyxHQUFHLENBQUMsc0JBQXNCOUI7UUFDcEM7SUFDRjtJQUVBLG1CQUFtQjtJQUNuQnZCLGFBQWFFLFNBQVMsR0FBR0YsYUFBYUUsU0FBUyxDQUFDc0QsSUFBSTtJQUVwRCwyQ0FBMkM7SUFDM0N2QyxnQkFBZ0JBLGNBQWN3QyxLQUFLLENBQUMsQ0FBQyxLQUFLQyxPQUFPO0lBRWpEbkUsS0FBS2tDLFdBQVcsQ0FBQztRQUNmekI7UUFDQUs7UUFDQUM7UUFDQUM7UUFDQUU7UUFDQVE7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3dvcmtlcnMvbG9nUGFyc2VyLmpzPzU5MDAiXSwic291cmNlc0NvbnRlbnQiOlsic2VsZi5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xuICBjb25zdCBsb2dDb250ZW50ID0gZS5kYXRhO1xuICBjb25zdCBsaW5lcyA9IGxvZ0NvbnRlbnQuc3BsaXQoXCJcXG5cIik7XG4gIGNvbnN0IHRvdGFsTGluZXMgPSBsaW5lcy5sZW5ndGg7XG5cbiAgY29uc3QgcmVxdWVzdFN0YXRzID0ge1xuICAgIHRvdGFsUmVxdWVzdHM6IDAsXG4gICAgdW5pcXVlSVBzOiBuZXcgU2V0KCksXG4gICAgdG90YWxBdHRhY2tBdHRlbXB0czogMCxcbiAgfTtcbiAgY29uc3QgaHR0cE1ldGhvZHMgPSB7fTtcbiAgY29uc3Qgc3RhdHVzQ29kZXMgPSB7IFwiMnh4XCI6IDAsIFwiM3h4XCI6IDAsIFwiNHh4XCI6IDAsIFwiNXh4XCI6IDAgfTtcbiAgY29uc3QgYXR0YWNrRGlzdHJpYnV0aW9uID0ge1xuICAgIFwiU1FMIEluamVjdGlvblwiOiAwLFxuICAgIFhTUzogMCxcbiAgICBcIkNvbW1hbmQgSW5qZWN0aW9uXCI6IDAsXG4gICAgXCJEaXJlY3RvcnkgVHJhdmVyc2FsXCI6IDAsXG4gICAgXCJCcnV0ZSBGb3JjZVwiOiAwLFxuICB9O1xuICBjb25zdCB0cmFmZmljT3ZlclRpbWUgPSBBcnJheSgyNClcbiAgICAuZmlsbCgwKVxuICAgIC5tYXAoKF8sIGkpID0+ICh7IGhvdXI6IGksIGNvdW50OiAwIH0pKTtcbiAgbGV0IHJlY2VudEF0dGFja3MgPSBbXTtcblxuICAvLyBJbXByb3ZlZCBTUUwgSW5qZWN0aW9uIHBhdHRlcm4gdG8gYXZvaWQgZmFsc2UgcG9zaXRpdmVzXG4gIGNvbnN0IGF0dGFja1BhdHRlcm5zID0ge1xuICAgIFwiU1FMIEluamVjdGlvblwiOiBuZXcgUmVnRXhwKFxuICAgICAgXCIoVU5JT05cXFxccytTRUxFQ1R8U0VMRUNUXFxcXHMrLipcXFxccytGUk9NfERST1BcXFxccytUQUJMRXwtLXwlMjd8JTJEJTJEfFxcXFxzKk9SXFxcXHMqJ1xcXFxkfEVYRUN8Q09OQ0FUfFxcXFxiKFNFTEVDVHxJTlNFUlR8VVBEQVRFfERFTEVURSlcXFxcYihcXFxccyt8JCl8O1xcXFxzKi0tKVwiLFxuICAgICAgXCJpXCJcbiAgICApLFxuICAgIFhTUzogbmV3IFJlZ0V4cChcbiAgICAgIFwiPHNjcmlwdFtePl0qPnxqYXZhc2NyaXB0OnxvbmVycm9yXFxcXHMqPXxvbmxvYWRcXFxccyo9fGV2YWxcXFxcKHxhbGVydFxcXFwofGRvY3VtZW50XFxcXC5jb29raWV8ZG9jdW1lbnRcXFxcLmxvY2F0aW9uXCIsXG4gICAgICBcImlcIlxuICAgICksXG4gICAgXCJDb21tYW5kIEluamVjdGlvblwiOiBuZXcgUmVnRXhwKFxuICAgICAgXCJcXFxcYihjYXR8bHN8aWR8dW5hbWV8d2hvYW1pfHB3ZHxybXx0b3VjaHx3Z2V0fGN1cmx8c2NwfHJzeW5jfGZ0cHxuY3xubWFwfHBpbmd8dHJhY2Vyb3V0ZXx0ZWxuZXR8c3NoKVxcXFxiKFxcXFxzK3wkKXxcXFxcYihzaHxiYXNofHpzaClcXFxcYihcXFxccyt8JClcIixcbiAgICAgIFwiaVwiXG4gICAgKSxcbiAgICBcIkRpcmVjdG9yeSBUcmF2ZXJzYWxcIjogbmV3IFJlZ0V4cChcIihcXFxcLlxcXFwuLyl7Mix9fCUyZXsyLH1cIiwgXCJpXCIpLFxuICAgIFwiQnJ1dGUgRm9yY2VcIjogL2xvZ2lufHNpZ25pbnxhdXRoZW50aWNhdGV8cGFzc3dvcmR8YWRtaW58dXNlci9pLFxuICB9O1xuXG4gIGNvbnN0IHZhbGlkSHR0cE1ldGhvZHMgPSBbXG4gICAgXCJHRVRcIixcbiAgICBcIlBPU1RcIixcbiAgICBcIlBVVFwiLFxuICAgIFwiREVMRVRFXCIsXG4gICAgXCJIRUFEXCIsXG4gICAgXCJPUFRJT05TXCIsXG4gICAgXCJQQVRDSFwiLFxuICAgIFwiQ09OTkVDVFwiLFxuICAgIFwiVFJBQ0VcIixcbiAgXTtcblxuICBjb25zdCBjb21tb25QYXJhbXMgPSBbXG4gICAgXCJpdGVtX2NhdGVnb3J5X2lkXCIsXG4gICAgXCJjdXN0b21lcl9pZFwiLFxuICAgIFwicHJvZHVjdF9pZFwiLFxuICAgIFwicHJpY2VfbGlzdF9pZFwiLFxuICAgIFwiY3VzdG9tZXJfdHlwZV9pZFwiLFxuICAgIFwiYnJhbmNoX2lkXCIsXG4gIF07XG5cbiAgbGluZXMuZm9yRWFjaCgobGluZSwgaW5kZXgpID0+IHtcbiAgICBpZiAoaW5kZXggJSAxMDAwID09PSAwKSB7XG4gICAgICBzZWxmLnBvc3RNZXNzYWdlKHsgcHJvZ3Jlc3M6IE1hdGgucm91bmQoKGluZGV4IC8gdG90YWxMaW5lcykgKiAxMDApIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaChcbiAgICAgIC9eKFxcUyspIChcXFMrKSAoXFxTKykgXFxbKFteXFxdXSspXFxdIFwiKFxcUyspIChbXlwiXSopXCIgKFxcZCspIChcXGQrKSBcIihbXlwiXSopXCIgXCIoW15cIl0qKVwiL1xuICAgICk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCBbXG4gICAgICAgICxcbiAgICAgICAgaXBBZGRyZXNzLFxuICAgICAgICAsXG4gICAgICAgICxcbiAgICAgICAgdGltZXN0YW1wLFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIHBhdGgsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgLFxuICAgICAgICByZWZlcmVyLFxuICAgICAgICB1c2VyQWdlbnQsXG4gICAgICBdID0gbWF0Y2g7XG5cbiAgICAgIC8vIFNraXAgaW52YWxpZCBIVFRQIG1ldGhvZHNcbiAgICAgIGlmICghdmFsaWRIdHRwTWV0aG9kcy5pbmNsdWRlcyhtZXRob2QpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVxdWVzdFN0YXRzLnRvdGFsUmVxdWVzdHMrKztcbiAgICAgIHJlcXVlc3RTdGF0cy51bmlxdWVJUHMuYWRkKGlwQWRkcmVzcyk7XG5cbiAgICAgIGh0dHBNZXRob2RzW21ldGhvZF0gPSAoaHR0cE1ldGhvZHNbbWV0aG9kXSB8fCAwKSArIDE7XG5cbiAgICAgIGNvbnN0IHN0YXR1c0dyb3VwID0gc3RhdHVzWzBdICsgXCJ4eFwiO1xuICAgICAgc3RhdHVzQ29kZXNbc3RhdHVzR3JvdXBdKys7XG5cbiAgICAgIGNvbnN0IGhvdXIgPSBuZXcgRGF0ZSh0aW1lc3RhbXAucmVwbGFjZShcIjpcIiwgXCIgXCIpKS5nZXRIb3VycygpO1xuICAgICAgdHJhZmZpY092ZXJUaW1lW2hvdXJdLmNvdW50Kys7XG5cbiAgICAgIGxldCBhdHRhY2tUeXBlID0gbnVsbDtcblxuICAgICAgLy8gRXhjbHVkZSBjb21tb24gcGFyYW1ldGVycyBmcm9tIGJlaW5nIGZsYWdnZWQgYXMgU1FMIEluamVjdGlvblxuICAgICAgY29uc3QgaXNTYWZlID0gY29tbW9uUGFyYW1zLnNvbWUoKHBhcmFtKSA9PiBwYXRoLmluY2x1ZGVzKHBhcmFtKSk7XG4gICAgICBpZiAoIWlzU2FmZSkge1xuICAgICAgICBmb3IgKGNvbnN0IFt0eXBlLCBwYXR0ZXJuXSBvZiBPYmplY3QuZW50cmllcyhhdHRhY2tQYXR0ZXJucykpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBwYXR0ZXJuLnRlc3QocGF0aCkgfHxcbiAgICAgICAgICAgIHBhdHRlcm4udGVzdChyZWZlcmVyKSB8fFxuICAgICAgICAgICAgcGF0dGVybi50ZXN0KHVzZXJBZ2VudClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGF0dGFja1R5cGUgPSB0eXBlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIExvZyBhbmQgY291bnQgZGV0ZWN0ZWQgYXR0YWNrc1xuICAgICAgaWYgKGF0dGFja1R5cGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYEF0dGFjayBkZXRlY3RlZDogJHthdHRhY2tUeXBlfSBmcm9tICR7aXBBZGRyZXNzfSBvbiAke3BhdGh9YFxuICAgICAgICApO1xuICAgICAgICBhdHRhY2tEaXN0cmlidXRpb25bYXR0YWNrVHlwZV0rKztcbiAgICAgICAgcmVxdWVzdFN0YXRzLnRvdGFsQXR0YWNrQXR0ZW1wdHMrKztcbiAgICAgICAgcmVjZW50QXR0YWNrcy5wdXNoKHtcbiAgICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgICAgaXBBZGRyZXNzLFxuICAgICAgICAgIGF0dGFja1R5cGUsXG4gICAgICAgICAgcmVxdWVzdFBhdGg6IHBhdGgsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMb2cgbm9uLW1hdGNoaW5nIGxpbmVzIGZvciBkZWJ1Z2dpbmdcbiAgICAgIGNvbnNvbGUubG9nKFwiTm8gbWF0Y2ggZm9yIGxpbmU6XCIsIGxpbmUpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVW5pcXVlIElQcyBjb3VudFxuICByZXF1ZXN0U3RhdHMudW5pcXVlSVBzID0gcmVxdWVzdFN0YXRzLnVuaXF1ZUlQcy5zaXplO1xuXG4gIC8vIExpbWl0IHRoZSByZWNlbnQgYXR0YWNrcyB0byB0aGUgbGFzdCAxMDBcbiAgcmVjZW50QXR0YWNrcyA9IHJlY2VudEF0dGFja3Muc2xpY2UoLTEwMCkucmV2ZXJzZSgpO1xuXG4gIHNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgIHJlcXVlc3RTdGF0cyxcbiAgICBodHRwTWV0aG9kcyxcbiAgICBzdGF0dXNDb2RlcyxcbiAgICBhdHRhY2tEaXN0cmlidXRpb24sXG4gICAgdHJhZmZpY092ZXJUaW1lLFxuICAgIHJlY2VudEF0dGFja3MsXG4gIH0pO1xufTtcbiJdLCJuYW1lcyI6WyJzZWxmIiwib25tZXNzYWdlIiwiZSIsImxvZ0NvbnRlbnQiLCJkYXRhIiwibGluZXMiLCJzcGxpdCIsInRvdGFsTGluZXMiLCJsZW5ndGgiLCJyZXF1ZXN0U3RhdHMiLCJ0b3RhbFJlcXVlc3RzIiwidW5pcXVlSVBzIiwiU2V0IiwidG90YWxBdHRhY2tBdHRlbXB0cyIsImh0dHBNZXRob2RzIiwic3RhdHVzQ29kZXMiLCJhdHRhY2tEaXN0cmlidXRpb24iLCJYU1MiLCJ0cmFmZmljT3ZlclRpbWUiLCJBcnJheSIsImZpbGwiLCJtYXAiLCJfIiwiaSIsImhvdXIiLCJjb3VudCIsInJlY2VudEF0dGFja3MiLCJhdHRhY2tQYXR0ZXJucyIsIlJlZ0V4cCIsInZhbGlkSHR0cE1ldGhvZHMiLCJjb21tb25QYXJhbXMiLCJmb3JFYWNoIiwibGluZSIsImluZGV4IiwicG9zdE1lc3NhZ2UiLCJwcm9ncmVzcyIsIk1hdGgiLCJyb3VuZCIsIm1hdGNoIiwiaXBBZGRyZXNzIiwidGltZXN0YW1wIiwibWV0aG9kIiwicGF0aCIsInN0YXR1cyIsInJlZmVyZXIiLCJ1c2VyQWdlbnQiLCJpbmNsdWRlcyIsImFkZCIsInN0YXR1c0dyb3VwIiwiRGF0ZSIsInJlcGxhY2UiLCJnZXRIb3VycyIsImF0dGFja1R5cGUiLCJpc1NhZmUiLCJzb21lIiwicGFyYW0iLCJ0eXBlIiwicGF0dGVybiIsIk9iamVjdCIsImVudHJpZXMiLCJ0ZXN0IiwiY29uc29sZSIsImxvZyIsInB1c2giLCJyZXF1ZXN0UGF0aCIsInNpemUiLCJzbGljZSIsInJldmVyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./workers/logParser.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "061541ff800786d5"; }
/******/ }();
/******/ 
/******/ }
);