/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "(ssr)/./workers/logParser.js":
/*!******************************!*\
  !*** ./workers/logParser.js ***!
  \******************************/
/***/ (() => {

eval("self.onmessage = (e)=>{\n    const logContent = e.data;\n    const lines = logContent.split(\"\\n\");\n    const totalLines = lines.length;\n    const requestStats = {\n        totalRequests: 0,\n        uniqueIPs: new Set(),\n        totalAttackAttempts: 0\n    };\n    const httpMethods = {};\n    const statusCodes = {\n        \"2xx\": 0,\n        \"3xx\": 0,\n        \"4xx\": 0,\n        \"5xx\": 0\n    };\n    const attackDistribution = {\n        \"SQL Injection\": 0,\n        XSS: 0,\n        \"Command Injection\": 0,\n        \"Directory Traversal\": 0,\n        \"Brute Force\": 0\n    };\n    const trafficOverTime = Array(24).fill(0).map((_, i)=>({\n            hour: i,\n            count: 0\n        }));\n    let recentAttacks = [];\n    const attackPatterns = {\n        \"SQL Injection\": new RegExp(\"(--|;|\\\\bUNION\\\\b|\\\\bSELECT\\\\b|\\\\bINSERT\\\\b|\\\\bDELETE\\\\b|\\\\bUPDATE\\\\b|\\\\bDROP\\\\b|\\\\bTABLE\\\\b|\\\\bFROM\\\\b|\\\\bWHERE\\\\b|\\\\bOR\\\\b|\\\\bAND\\\\b|'|\\\"|\\\\bEXEC\\\\b|\\\\bCONCAT\\\\b|\\\\bINTO\\\\b|\\\\bOUTFILE\\\\b|\\\\bLOAD_FILE\\\\b|\\\\bSELECT\\\\b.*\\\\bINTO\\\\b|\\\\bLOAD_FILE\\\\b|%27|%2D%2D|%3B|\\\\bDBMS_PIPE\\\\b|\\\\bSLEEP\\\\b|\\\\bBENCHMARK\\\\b)\", \"i\"),\n        XSS: new RegExp(\"<script[^>]*>|javascript:|onerror\\\\s*=|onload\\\\s*=|eval\\\\(|alert\\\\(|document\\\\.cookie|document\\\\.location|<img[^>]+onerror|<svg[^>]+onload|<iframe|<object|<embed|document\\\\.write\", \"i\"),\n        \"Command Injection\": new RegExp(\"\\\\b(cat|ls|id|uname|whoami|pwd|rm|touch|wget|curl|scp|rsync|ftp|nc|nmap|ping|traceroute|telnet|ssh|sh|bash|zsh)\\\\b(\\\\s+|$)|\\\\b(sh|bash|zsh)\\\\b(\\\\s+|$)\", \"i\"),\n        \"Directory Traversal\": new RegExp(\"(\\\\.\\\\./){2,}|%2e{2,}|\\\\b(?:/|\\\\\\\\)(?:\\\\S+)?\\\\b(?:\\\\.{2,}|\\\\../){2,}\", \"i\"),\n        \"Brute Force\": new RegExp(\"login|signin|authenticate|password|user|checkin|auth|account|register|confirm|reset|forgot|login\\\\.php|login\\\\.aspx|signin\\\\.php|signin\\\\.aspx|auth\\\\.php|user_checkin_activity|reset_password\", \"i\")\n    };\n    const validHttpMethods = [\n        \"GET\",\n        \"POST\",\n        \"PUT\",\n        \"DELETE\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"PATCH\",\n        \"CONNECT\",\n        \"TRACE\"\n    ];\n    lines.forEach((line, index)=>{\n        if (index % 1000 === 0) {\n            self.postMessage({\n                progress: Math.round(index / totalLines * 100)\n            });\n        }\n        const match = line.match(/^(\\S+) (\\S+) (\\S+) \\[([^\\]]+)\\] \"(\\S+) ([^\"]*)\" (\\d+) (\\d+) \"([^\"]*)\" \"([^\"]*)\"/);\n        if (match) {\n            const [, ipAddress, , , timestamp, method, path, status, , referer, userAgent] = match;\n            if (!validHttpMethods.includes(method)) {\n                return;\n            }\n            requestStats.totalRequests++;\n            requestStats.uniqueIPs.add(ipAddress);\n            httpMethods[method] = (httpMethods[method] || 0) + 1;\n            const statusGroup = status[0] + \"xx\";\n            statusCodes[statusGroup]++;\n            const hour = new Date(timestamp.replace(\":\", \" \")).getHours();\n            trafficOverTime[hour].count++;\n            let attackType = null;\n            for (const [type, pattern] of Object.entries(attackPatterns)){\n                if (pattern.test(path) || pattern.test(referer) || pattern.test(userAgent)) {\n                    attackType = type;\n                    break;\n                }\n            }\n            if (attackType) {\n                attackDistribution[attackType]++;\n                requestStats.totalAttackAttempts++;\n                recentAttacks.push({\n                    timestamp,\n                    ipAddress,\n                    attackType,\n                    requestPath: path\n                });\n            }\n        }\n    });\n    requestStats.uniqueIPs = requestStats.uniqueIPs.size;\n    recentAttacks = recentAttacks.slice(-100).reverse();\n    self.postMessage({\n        requestStats,\n        httpMethods,\n        statusCodes,\n        attackDistribution,\n        trafficOverTime,\n        recentAttacks\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./workers/logParser.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["(ssr)/./workers/logParser.js"]();
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;